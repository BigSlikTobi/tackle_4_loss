
{
"github.copilot.chat.commitMessageGeneration.instructions": [
      {
          "text": "## Git Commit Message Guidelines\n\n* **Subject-Body Separation:** Separate the subject line from the body with a blank line.\n* **Subject Line Punctuation:** Do not end the subject line with a period.\n* **Capitalization:** Capitalize the subject line and the first word of each paragraph in the body.\n* **Imperative Mood:** Use the imperative mood in the subject line (e.g., Fix bug, not Fixed bug).\n* **Line Wrapping:** Wrap lines in the body at 72 characters.\n* **Body Content:**\n  * Explain *what* and *why* changes were made.\n  * Avoid detailing *how* changes were implemented (focus on the outcome).\n  * Describe why a change is being made.\n  * Explain how it addresses the issue.\n  * Detail the effects of the patch.\n  * Do not assume the reviewer understands what the original problem was.\n  * Do not assume the code is self-evident/self-documenting.\n  * Read the commit message to see if it hints at improved code structure.\n  * Describe any limitations of the current code.\n  * Do not include patch set-specific comments."
      }
  ],
  "github.copilot.chat.codeGeneration.instructions": [
      {
          "text": "## Bug/Error/Problem/Review Handling\n\nWhen addressing bugs, errors, problems, or reviews, please follow this process:\n\n1. **Brainstorm Possibilities:**\n    * Reflect on 5-7 different potential causes of the issue.\n\n2. **Distill to Likely Sources:**\n    * Narrow down the possibilities to the 1-2 most likely root causes.\n\n3. **Validate with Logs:**\n    * Add relevant logs to your code to validate your assumptions. This helps confirm the identified sources.\n\n4. **Implement Code Fix:**\n    * Once the problem is confirmed, proceed with implementing the necessary code fix.\n\n## Implementation Process\n\nWhen implementing new features or changes, please follow this process:\n\n1. **Brainstorm Implementation Possibilities:**\n    * Generate 5 different potential implementation approaches.\n\n2. **Evaluate and Select Best Approach:**\n    * Evaluate each implementation based on:\n        * Architecture: How well it fits with the existing system.\n        * Implementation: Complexity and maintainability.\n        * User Acceptance: Potential impact on user experience.\n    * Select the best approach based on this evaluation.\n\n3. **Implement the Selected Approach:**\n    * Implement the chosen approach.\n\n4. **Monitor Terminal for Issues:**\n    * Pay close attention to the terminal output for any errors or warnings.\n\n5. **Address Terminal Issues:**\n    * Resolve any reported issues before finalizing the implementation.\n\n## Flutter UI Best Practices for Preventing Overflow\n\nTo ensure your Flutter UI is robust, responsive, and avoids overflow errors, follow these guidelines:\n\n**1. Fundamental Layout Principles**\n\n* **Use Flexible Widgets:** Employ `Flexible`, `Expanded`, and `FractionallySizedBox` within `Row` and `Column` to distribute space dynamically.\n* **Layout Builders:** For complex layouts, use `LayoutBuilder` to get parent constraints.\n* **SafeArea:** Wrap top-level widget with `SafeArea`.\n* **SingleChildScrollView:** Use when content might exceed screen size.\n* **IntrinsicWidth/IntrinsicHeight:** Use with caution for aligning varying size widgets.\n\n**2. Overflow Prevention Strategies**\n\n* Use Flutter Inspector to identify overflow errors\n* Wrap `Row`/`Column` children in `Flexible` or `Expanded`\n* Use `ConstrainedBox` to limit widget sizes\n* Handle text overflow with `maxLines` and `overflow` properties\n* Control image sizing with `BoxFit` and constraints\n\n**3. Best Practices**\n\n* Use consistent spacing with `Padding` and `SizedBox`\n* Utilize Flutter's `Theme` for consistent styling\n* Break down UI into reusable widgets\n* Optimize performance with `const` and `ListView.builder`\n* Consider responsive design using `MediaQuery`\n* Ensure accessibility with semantic widgets"
      }
  ]
}